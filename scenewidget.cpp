#include <cmath>
#include <iostream>
#include <stdexcept>

#include "scenewidget.h"

SceneWidget::SceneWidget(QWidget *parent)
    : QOpenGLWidget (parent),
      m_lightPosition(0.0f, 1.0f, 0.0f),
      m_lightAmbient(0.2f, 0.2f, 0.2f),
      m_lightDiffuse(1.0f, 1.0f, 1.0f),
      m_lightSpecular(1.0f, 1.0f, 1.0f),
      m_materialShininess(30.0f),
      m_materialAmbient(1.0f, 1.0f, 1.0f),
      m_materialDiffuse(1.0f, 0.8f, 0.0f),
      m_materialSpecular(1.0f, 0.8f, 0.0f)
{
    // Set OpenGL version and profile
    QSurfaceFormat format;

    format.setRenderableType(QSurfaceFormat::OpenGL);
    format.setVersion(3, 2);
    format.setProfile(QSurfaceFormat::CoreProfile);
    format.setDepthBufferSize(24);
    format.setSamples(4);

    setFormat(format);
    setFocusPolicy(Qt::StrongFocus);
}

SceneWidget::~SceneWidget()
{
    delete m_qprogram;
}

void SceneWidget::initializeGL()
{
    // Init opengl
    if(!initializeOpenGLFunctions())
        throw std::runtime_error("Could not load OpenGL functions.\nDo you have OpenGL v3.2?");

    // Print version info
    std::clog << "OpenGL version: " << glGetString(GL_VERSION) <<
                 "\nGLSL version: " << glGetString(GL_SHADING_LANGUAGE_VERSION) <<
                 "\nRenderer: " << glGetString(GL_RENDERER) <<
                 "\nVendor: " << glGetString(GL_VENDOR) << '\n' << std::endl;

    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glClearDepth(1.0);

    // Enable depth test
    glEnable(GL_DEPTH_TEST);
    glDepthFunc(GL_LEQUAL);
    glDepthMask(GL_TRUE);
    glDepthRange(0.0, 1.0);

    initProgram();
    initData();
    setLightingParams();
}

void SceneWidget::initProgram()
{
    m_qprogram = new QOpenGLShaderProgram(this);
    m_qprogram->addShaderFromSourceFile(QOpenGLShader::Vertex, "vertex.glsl");
    m_qprogram->addShaderFromSourceFile(QOpenGLShader::Fragment, "fragment.glsl");
    m_qprogram->link();
    m_program = m_qprogram->programId();
}

void SceneWidget::initData()
{
    // Data
    GLfloat data[] = // Standard Ico sphere from blender
    {
        /* POSITIONS */
        0, -1, 0, 0.425323, -0.850654, 0.309011, -0.162456, -0.850654, 0.499995, 0.723607, -0.44722, 0.525725, 0.425323, -0.850654, 0.309011, 0.850648, -0.525736, 0, 0, -1, 0, -0.162456, -0.850654, 0.499995, -0.52573, -0.850652, 0, 0, -1, 0, -0.52573, -0.850652, 0, -0.162456, -0.850654, -0.499995, 0, -1, 0, -0.162456, -0.850654, -0.499995, 0.425323, -0.850654, -0.309011, 0.723607, -0.44722, 0.525725, 0.850648, -0.525736, 0, 0.951058, 0, 0.309013, -0.276388, -0.44722, 0.850649, 0.262869, -0.525738, 0.809012, 0, 0, 1, -0.894426, -0.447216, 0, -0.688189, -0.525736, 0.499997, -0.951058, 0, 0.309013, -0.276388, -0.44722, -0.850649, -0.688189, -0.525736, -0.499997, -0.587786, 0, -0.809017, 0.723607, -0.44722, -0.525725, 0.262869, -0.525738, -0.809012, 0.587786, 0, -0.809017, 0.723607, -0.44722, 0.525725, 0.951058, 0, 0.309013, 0.587786, 0, 0.809017, -0.276388, -0.44722, 0.850649, 0, 0, 1, -0.587786, 0, 0.809017, -0.894426, -0.447216, 0, -0.951058, 0, 0.309013, -0.951058, 0, -0.309013, -0.276388, -0.44722, -0.850649, -0.587786, 0, -0.809017, 0, 0, -1, 0.723607, -0.44722, -0.525725, 0.587786, 0, -0.809017, 0.951058, 0, -0.309013, 0.276388, 0.44722, 0.850649, 0.688189, 0.525736, 0.499997, 0.162456, 0.850654, 0.499995, -0.723607, 0.44722, 0.525725, -0.262869, 0.525738, 0.809012, -0.425323, 0.850654, 0.309011, -0.723607, 0.44722, -0.525725, -0.850648, 0.525736, 0, -0.425323, 0.850654, -0.309011, 0.276388, 0.44722, -0.850649, -0.262869, 0.525738, -0.809012, 0.162456, 0.850654, -0.499995, 0.894426, 0.447216, 0, 0.688189, 0.525736, -0.499997, 0.52573, 0.850652, 0, 0.52573, 0.850652, 0, 0.162456, 0.850654, -0.499995, 0, 1, 0, 0.52573, 0.850652, 0, 0.688189, 0.525736, -0.499997, 0.162456, 0.850654, -0.499995, 0.688189, 0.525736, -0.499997, 0.276388, 0.44722, -0.850649, 0.162456, 0.850654, -0.499995, 0.162456, 0.850654, -0.499995, -0.425323, 0.850654, -0.309011, 0, 1, 0, 0.162456, 0.850654, -0.499995, -0.262869, 0.525738, -0.809012, -0.425323, 0.850654, -0.309011, -0.262869, 0.525738, -0.809012, -0.723607, 0.44722, -0.525725, -0.425323, 0.850654, -0.309011, -0.425323, 0.850654, -0.309011, -0.425323, 0.850654, 0.309011, 0, 1, 0, -0.425323, 0.850654, -0.309011, -0.850648, 0.525736, 0, -0.425323, 0.850654, 0.309011, -0.850648, 0.525736, 0, -0.723607, 0.44722, 0.525725, -0.425323, 0.850654, 0.309011, -0.425323, 0.850654, 0.309011, 0.162456, 0.850654, 0.499995, 0, 1, 0, -0.425323, 0.850654, 0.309011, -0.262869, 0.525738, 0.809012, 0.162456, 0.850654, 0.499995, -0.262869, 0.525738, 0.809012, 0.276388, 0.44722, 0.850649, 0.162456, 0.850654, 0.499995, 0.162456, 0.850654, 0.499995, 0.52573, 0.850652, 0, 0, 1, 0, 0.162456, 0.850654, 0.499995, 0.688189, 0.525736, 0.499997, 0.52573, 0.850652, 0, 0.688189, 0.525736, 0.499997, 0.894426, 0.447216, 0, 0.52573, 0.850652, 0, 0.951058, 0, -0.309013, 0.688189, 0.525736, -0.499997, 0.894426, 0.447216, 0, 0.951058, 0, -0.309013, 0.587786, 0, -0.809017, 0.688189, 0.525736, -0.499997, 0.587786, 0, -0.809017, 0.276388, 0.44722, -0.850649, 0.688189, 0.525736, -0.499997, 0, 0, -1, -0.262869, 0.525738, -0.809012, 0.276388, 0.44722, -0.850649, 0, 0, -1, -0.587786, 0, -0.809017, -0.262869, 0.525738, -0.809012, -0.587786, 0, -0.809017, -0.723607, 0.44722, -0.525725, -0.262869, 0.525738, -0.809012, -0.951058, 0, -0.309013, -0.850648, 0.525736, 0, -0.723607, 0.44722, -0.525725, -0.951058, 0, -0.309013, -0.951058, 0, 0.309013, -0.850648, 0.525736, 0, -0.951058, 0, 0.309013, -0.723607, 0.44722, 0.525725, -0.850648, 0.525736, 0, -0.587786, 0, 0.809017, -0.262869, 0.525738, 0.809012, -0.723607, 0.44722, 0.525725, -0.587786, 0, 0.809017, 0, 0, 1, -0.262869, 0.525738, 0.809012, 0, 0, 1, 0.276388, 0.44722, 0.850649, -0.262869, 0.525738, 0.809012, 0.587786, 0, 0.809017, 0.688189, 0.525736, 0.499997, 0.276388, 0.44722, 0.850649, 0.587786, 0, 0.809017, 0.951058, 0, 0.309013, 0.688189, 0.525736, 0.499997, 0.951058, 0, 0.309013, 0.894426, 0.447216, 0, 0.688189, 0.525736, 0.499997, 0.587786, 0, -0.809017, 0, 0, -1, 0.276388, 0.44722, -0.850649, 0.587786, 0, -0.809017, 0.262869, -0.525738, -0.809012, 0, 0, -1, 0.262869, -0.525738, -0.809012, -0.276388, -0.44722, -0.850649, 0, 0, -1, -0.587786, 0, -0.809017, -0.951058, 0, -0.309013, -0.723607, 0.44722, -0.525725, -0.587786, 0, -0.809017, -0.688189, -0.525736, -0.499997, -0.951058, 0, -0.309013, -0.688189, -0.525736, -0.499997, -0.894426, -0.447216, 0, -0.951058, 0, -0.309013, -0.951058, 0, 0.309013, -0.587786, 0, 0.809017, -0.723607, 0.44722, 0.525725, -0.951058, 0, 0.309013, -0.688189, -0.525736, 0.499997, -0.587786, 0, 0.809017, -0.688189, -0.525736, 0.499997, -0.276388, -0.44722, 0.850649, -0.587786, 0, 0.809017, 0, 0, 1, 0.587786, 0, 0.809017, 0.276388, 0.44722, 0.850649, 0, 0, 1, 0.262869, -0.525738, 0.809012, 0.587786, 0, 0.809017, 0.262869, -0.525738, 0.809012, 0.723607, -0.44722, 0.525725, 0.587786, 0, 0.809017, 0.951058, 0, 0.309013, 0.951058, 0, -0.309013, 0.894426, 0.447216, 0, 0.951058, 0, 0.309013, 0.850648, -0.525736, 0, 0.951058, 0, -0.309013, 0.850648, -0.525736, 0, 0.723607, -0.44722, -0.525725, 0.951058, 0, -0.309013, 0.425323, -0.850654, -0.309011, 0.262869, -0.525738, -0.809012, 0.723607, -0.44722, -0.525725, 0.425323, -0.850654, -0.309011, -0.162456, -0.850654, -0.499995, 0.262869, -0.525738, -0.809012, -0.162456, -0.850654, -0.499995, -0.276388, -0.44722, -0.850649, 0.262869, -0.525738, -0.809012, -0.162456, -0.850654, -0.499995, -0.688189, -0.525736, -0.499997, -0.276388, -0.44722, -0.850649, -0.162456, -0.850654, -0.499995, -0.52573, -0.850652, 0, -0.688189, -0.525736, -0.499997, -0.52573, -0.850652, 0, -0.894426, -0.447216, 0, -0.688189, -0.525736, -0.499997, -0.52573, -0.850652, 0, -0.688189, -0.525736, 0.499997, -0.894426, -0.447216, 0, -0.52573, -0.850652, 0, -0.162456, -0.850654, 0.499995, -0.688189, -0.525736, 0.499997, -0.162456, -0.850654, 0.499995, -0.276388, -0.44722, 0.850649, -0.688189, -0.525736, 0.499997, 0.850648, -0.525736, 0, 0.425323, -0.850654, -0.309011, 0.723607, -0.44722, -0.525725, 0.850648, -0.525736, 0, 0.425323, -0.850654, 0.309011, 0.425323, -0.850654, -0.309011, 0.425323, -0.850654, 0.309011, 0, -1, 0, 0.425323, -0.850654, -0.309011, -0.162456, -0.850654, 0.499995, 0.262869, -0.525738, 0.809012, -0.276388, -0.44722, 0.850649, -0.162456, -0.850654, 0.499995, 0.425323, -0.850654, 0.309011, 0.262869, -0.525738, 0.809012, 0.425323, -0.850654, 0.309011, 0.723607, -0.44722, 0.525725, 0.262869, -0.525738, 0.809012,

        /* NORMALS */
        0.1024, -0.9435, 0.3151, 0.1024, -0.9435, 0.3151, 0.1024, -0.9435, 0.3151, 0.7002, -0.6617, 0.268, 0.7002, -0.6617, 0.268, 0.7002, -0.6617, 0.268, -0.268, -0.9435, 0.1947, -0.268, -0.9435, 0.1947, -0.268, -0.9435, 0.1947, -0.268, -0.9435, -0.1947, -0.268, -0.9435, -0.1947, -0.268, -0.9435, -0.1947, 0.1024, -0.9435, -0.3151, 0.1024, -0.9435, -0.3151, 0.1024, -0.9435, -0.3151, 0.905, -0.3304, 0.268, 0.905, -0.3304, 0.268, 0.905, -0.3304, 0.268, 0.0247, -0.3304, 0.9435, 0.0247, -0.3304, 0.9435, 0.0247, -0.3304, 0.9435, -0.8897, -0.3304, 0.3151, -0.8897, -0.3304, 0.3151, -0.8897, -0.3304, 0.3151, -0.5746, -0.3304, -0.7488, -0.5746, -0.3304, -0.7488, -0.5746, -0.3304, -0.7488, 0.5346, -0.3304, -0.7779, 0.5346, -0.3304, -0.7779, 0.5346, -0.3304, -0.7779, 0.8026, -0.1256, 0.5831, 0.8026, -0.1256, 0.5831, 0.8026, -0.1256, 0.5831, -0.3066, -0.1256, 0.9435, -0.3066, -0.1256, 0.9435, -0.3066, -0.1256, 0.9435, -0.9921, -0.1256, 0, -0.9921, -0.1256, 0, -0.9921, -0.1256, 0, -0.3066, -0.1256, -0.9435, -0.3066, -0.1256, -0.9435, -0.3066, -0.1256, -0.9435, 0.8026, -0.1256, -0.5831, 0.8026, -0.1256, -0.5831, 0.8026, -0.1256, -0.5831, 0.4089, 0.6617, 0.6284, 0.4089, 0.6617, 0.6284, 0.4089, 0.6617, 0.6284, -0.4713, 0.6617, 0.5831, -0.4713, 0.6617, 0.5831, -0.4713, 0.6617, 0.5831, -0.7002, 0.6617, -0.268, -0.7002, 0.6617, -0.268, -0.7002, 0.6617, -0.268, 0.0385, 0.6617, -0.7488, 0.0385, 0.6617, -0.7488, 0.0385, 0.6617, -0.7488, 0.724, 0.6617, -0.1947, 0.724, 0.6617, -0.1947, 0.724, 0.6617, -0.1947, 0.268, 0.9435, -0.1947, 0.268, 0.9435, -0.1947, 0.268, 0.9435, -0.1947, 0.4911, 0.7947, -0.3568, 0.4911, 0.7947, -0.3568, 0.4911, 0.7947, -0.3568, 0.4089, 0.6617, -0.6284, 0.4089, 0.6617, -0.6284, 0.4089, 0.6617, -0.6284, -0.1024, 0.9435, -0.3151, -0.1024, 0.9435, -0.3151, -0.1024, 0.9435, -0.3151, -0.1876, 0.7947, -0.5773, -0.1876, 0.7947, -0.5773, -0.1876, 0.7947, -0.5773, -0.4713, 0.6617, -0.5831, -0.4713, 0.6617, -0.5831, -0.4713, 0.6617, -0.5831, -0.3313, 0.9435, 0, -0.3313, 0.9435, 0, -0.3313, 0.9435, 0, -0.6071, 0.7947, 0, -0.6071, 0.7947, 0, -0.6071, 0.7947, 0, -0.7002, 0.6617, 0.268, -0.7002, 0.6617, 0.268, -0.7002, 0.6617, 0.268, -0.1024, 0.9435, 0.3151, -0.1024, 0.9435, 0.3151, -0.1024, 0.9435, 0.3151, -0.1876, 0.7947, 0.5773, -0.1876, 0.7947, 0.5773, -0.1876, 0.7947, 0.5773, 0.0385, 0.6617, 0.7488, 0.0385, 0.6617, 0.7488, 0.0385, 0.6617, 0.7488, 0.268, 0.9435, 0.1947, 0.268, 0.9435, 0.1947, 0.268, 0.9435, 0.1947, 0.4911, 0.7947, 0.3568, 0.4911, 0.7947, 0.3568, 0.4911, 0.7947, 0.3568, 0.724, 0.6617, 0.1947, 0.724, 0.6617, 0.1947, 0.724, 0.6617, 0.1947, 0.8897, 0.3304, -0.3151, 0.8897, 0.3304, -0.3151, 0.8897, 0.3304, -0.3151, 0.7947, 0.1876, -0.5773, 0.7947, 0.1876, -0.5773, 0.7947, 0.1876, -0.5773, 0.5746, 0.3304, -0.7488, 0.5746, 0.3304, -0.7488, 0.5746, 0.3304, -0.7488, -0.0247, 0.3304, -0.9435, -0.0247, 0.3304, -0.9435, -0.0247, 0.3304, -0.9435, -0.3035, 0.1876, -0.9342, -0.3035, 0.1876, -0.9342, -0.3035, 0.1876, -0.9342, -0.5346, 0.3304, -0.7779, -0.5346, 0.3304, -0.7779, -0.5346, 0.3304, -0.7779, -0.905, 0.3304, -0.268, -0.905, 0.3304, -0.268, -0.905, 0.3304, -0.268, -0.9822, 0.1876, 0, -0.9822, 0.1876, 0, -0.9822, 0.1876, 0, -0.905, 0.3304, 0.268, -0.905, 0.3304, 0.268, -0.905, 0.3304, 0.268, -0.5346, 0.3304, 0.7779, -0.5346, 0.3304, 0.7779, -0.5346, 0.3304, 0.7779, -0.3035, 0.1876, 0.9342, -0.3035, 0.1876, 0.9342, -0.3035, 0.1876, 0.9342, -0.0247, 0.3304, 0.9435, -0.0247, 0.3304, 0.9435, -0.0247, 0.3304, 0.9435, 0.5746, 0.3304, 0.7488, 0.5746, 0.3304, 0.7488, 0.5746, 0.3304, 0.7488, 0.7947, 0.1876, 0.5773, 0.7947, 0.1876, 0.5773, 0.7947, 0.1876, 0.5773, 0.8897, 0.3304, 0.3151, 0.8897, 0.3304, 0.3151, 0.8897, 0.3304, 0.3151, 0.3066, 0.1256, -0.9435, 0.3066, 0.1256, -0.9435, 0.3066, 0.1256, -0.9435, 0.3035, -0.1876, -0.9342, 0.3035, -0.1876, -0.9342, 0.3035, -0.1876, -0.9342, 0.0247, -0.3304, -0.9435, 0.0247, -0.3304, -0.9435, 0.0247, -0.3304, -0.9435, -0.8026, 0.1256, -0.5831, -0.8026, 0.1256, -0.5831, -0.8026, 0.1256, -0.5831, -0.7947, -0.1876, -0.5773, -0.7947, -0.1876, -0.5773, -0.7947, -0.1876, -0.5773, -0.8897, -0.3304, -0.3151, -0.8897, -0.3304, -0.3151, -0.8897, -0.3304, -0.3151, -0.8026, 0.1256, 0.5831, -0.8026, 0.1256, 0.5831, -0.8026, 0.1256, 0.5831, -0.7947, -0.1876, 0.5773, -0.7947, -0.1876, 0.5773, -0.7947, -0.1876, 0.5773, -0.5746, -0.3304, 0.7488, -0.5746, -0.3304, 0.7488, -0.5746, -0.3304, 0.7488, 0.3066, 0.1256, 0.9435, 0.3066, 0.1256, 0.9435, 0.3066, 0.1256, 0.9435, 0.3035, -0.1876, 0.9342, 0.3035, -0.1876, 0.9342, 0.3035, -0.1876, 0.9342, 0.5346, -0.3304, 0.7779, 0.5346, -0.3304, 0.7779, 0.5346, -0.3304, 0.7779, 0.9921, 0.1256, 0, 0.9921, 0.1256, 0, 0.9921, 0.1256, 0, 0.9822, -0.1876, 0, 0.9822, -0.1876, 0, 0.9822, -0.1876, 0, 0.905, -0.3304, -0.268, 0.905, -0.3304, -0.268, 0.905, -0.3304, -0.268, 0.4713, -0.6617, -0.5831, 0.4713, -0.6617, -0.5831, 0.4713, -0.6617, -0.5831, 0.1876, -0.7947, -0.5773, 0.1876, -0.7947, -0.5773, 0.1876, -0.7947, -0.5773, -0.0385, -0.6617, -0.7488, -0.0385, -0.6617, -0.7488, -0.0385, -0.6617, -0.7488, -0.4089, -0.6617, -0.6284, -0.4089, -0.6617, -0.6284, -0.4089, -0.6617, -0.6284, -0.4911, -0.7947, -0.3568, -0.4911, -0.7947, -0.3568, -0.4911, -0.7947, -0.3568, -0.724, -0.6617, -0.1947, -0.724, -0.6617, -0.1947, -0.724, -0.6617, -0.1947, -0.724, -0.6617, 0.1947, -0.724, -0.6617, 0.1947, -0.724, -0.6617, 0.1947, -0.4911, -0.7947, 0.3568, -0.4911, -0.7947, 0.3568, -0.4911, -0.7947, 0.3568, -0.4089, -0.6617, 0.6284, -0.4089, -0.6617, 0.6284, -0.4089, -0.6617, 0.6284, 0.7002, -0.6617, -0.268, 0.7002, -0.6617, -0.268, 0.7002, -0.6617, -0.268, 0.6071, -0.7947, 0, 0.6071, -0.7947, 0, 0.6071, -0.7947, 0, 0.3313, -0.9435, 0, 0.3313, -0.9435, 0, 0.3313, -0.9435, 0, -0.0385, -0.6617, 0.7488, -0.0385, -0.6617, 0.7488, -0.0385, -0.6617, 0.7488, 0.1876, -0.7947, 0.5773, 0.1876, -0.7947, 0.5773, 0.1876, -0.7947, 0.5773, 0.4713, -0.6617, 0.5831, 0.4713, -0.6617, 0.5831, 0.4713, -0.6617, 0.5831,
    };

    // Create and bind vao
    glGenVertexArrays(1, &m_vao);
    glBindVertexArray(m_vao);

    // Create and bind position vbo
    glGenBuffers(1, &m_vertexDataVbo);
    glBindBuffer(GL_ARRAY_BUFFER, m_vertexDataVbo);

    // Create and bind indices vbo
    glGenBuffers(1, &m_indicesVbo);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, m_indicesVbo);

    // Fill position buffer
    glBufferData(GL_ARRAY_BUFFER, sizeof data, data, GL_STATIC_DRAW);

    // Position attribute
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, reinterpret_cast<void*>(0));

    // Normal attribute
    glEnableVertexAttribArray(1);
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, reinterpret_cast<void*>(numOfVertices * 3 * sizeof (GLfloat)));

    // Cleanup
    glBindVertexArray(0);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
    glBindBuffer(GL_ARRAY_BUFFER, 0);
}

void SceneWidget::paintGL()
{
    glClear(GL_COLOR_BUFFER_BIT);

    glUseProgram(m_program);
    glBindVertexArray(m_vao);

    glDrawArrays(GL_TRIANGLES, 0, 3 * numOfVertices);

    glBindVertexArray(0);
    glUseProgram(0);


    if (m_enableRotation)
    {
        m_angle = m_angle + m_rotationSpeed;
        while (m_angle > 360.0f) m_angle -= 360.0f;
    }

    recalcMvpMatrix();

    // Schedule another repaint event
    update();
}

void SceneWidget::recalcMvpMatrix()
{
    // Set mvp matrix
    const float aspect = static_cast<float>(m_width) / m_height;

    m_mvMatrix.setToIdentity();

    const QVector3D eye
    {
        m_cameraRadius * std::cos(m_cameraPhi) * std::cos(m_cameraTheta),
        m_cameraRadius * std::sin(m_cameraPhi),
        m_cameraRadius * std::cos(m_cameraPhi) * std::sin(m_cameraTheta)
    };

    m_mvMatrix.lookAt(eye, QVector3D(0, 0, 0), QVector3D(0, 1, 0)); // view
    m_mvMatrix.rotate(m_angle, QVector3D(1, 0, 0)); // model

    m_pMatrix.setToIdentity();
    m_pMatrix.perspective(90.0f, aspect, 1.0f, 30.0f); // projection

    // Load uniforms
    glUseProgram(m_program);
    m_qprogram->setUniformValue("mvMatrix", m_mvMatrix);
    m_qprogram->setUniformValue("pMatrix", m_pMatrix);
    glUseProgram(0);
}

void SceneWidget::setLightingParams()
{
    glUseProgram(m_program);

    m_qprogram->setUniformValue("lightPosition", m_lightPosition);
    m_qprogram->setUniformValue("lightAmbient", m_enableAmbient ? m_lightAmbient : QVector3D(0.0, 0.0, 0.0));
    m_qprogram->setUniformValue("lightDiffuse", m_enableDiffuse ? m_lightDiffuse : QVector3D(0.0, 0.0, 0.0));
    m_qprogram->setUniformValue("lightSpecular", m_enableSpecular ? m_lightSpecular : QVector3D(0.0, 0.0, 0.0));

    m_qprogram->setUniformValue("materialShininess", m_materialShininess);
    m_qprogram->setUniformValue("materialAmbient", m_enableAmbient ? m_materialAmbient : QVector3D(0.0, 0.0, 0.0));
    m_qprogram->setUniformValue("materialDiffuse", m_enableDiffuse ? m_materialDiffuse : QVector3D(0.0, 0.0, 0.0));
    m_qprogram->setUniformValue("materialSpecular", m_enableSpecular ? m_materialSpecular : QVector3D(0.0, 0.0, 0.0));

    glUseProgram(0);
}

void SceneWidget::resizeGL(int w, int h)
{
    // Adjust viewport
    glViewport(0, 0, w, h);

    // Change width and height
    m_width = w;
    m_height = h;
    recalcMvpMatrix();
}
